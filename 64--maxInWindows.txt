给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，
如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，
他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有
以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}，
 {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。
第一种方法：
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> maxInWindows(int [] num, int size)
    {
        ArrayList<Integer> list=new ArrayList<Integer>();
        if(num==null||size==0)
           return list;
        int start=0;
        int end=start+size-1;
        for(int i=start;i<=num.length-size;i++){
            int max=num[start];
            for(int j=start+1;j<=end;j++){
                if(max<num[j]){
                    max=num[j];
                }
            }
            list.add(max);
            start++;
            end++;
        }
        return list;
    }
}
第二种方法：用一个双端队列，双端队列队头存的是滑动窗口里的最大值，
对于新来的元素与双端队列中的元素比较，把队列里比它小的都移出去，
负责把这个数的下标与队列里比它大的数x的下标相比较，判断x是否已经不属于滑动窗口了，
不属于就直接移除队列。