输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4,。

用最大堆（k长度的），每次只和堆顶比较，如果比堆顶小就移除堆顶，把这个元素加入最大堆 时间复杂度：O(nlog(k))
import java.util.PriorityQueue;
import java.util.Comparator;
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> result=new ArrayList<Integer>();
        int len=input.length;
        if(input==null||k<=0||k>input.length||input.length==0)
           return result;
           PriorityQueue<Integer> maxheap=new PriorityQueue<Integer>(k,new Comparator<Integer>(){
               public int compare(Integer o1,Integer o2){
                   return o2.compareTo(o1);
               }
           } );
        for(int i=0;i<len;i++){
            if(maxheap.size()!=k){
                maxheap.offer(input[i]);
            }else if(maxheap.peek()>input[i]){
                maxheap.poll();
                maxheap.offer(input[i]);
            }
        }
        for (int i=0;i<k;i++){
            result.add(maxheap.poll());
        }
        return result;
    }
}


第二种用一个k长度的ArrayList数组,写一个得到它里面最大元素的方法，得到最大的元素和现在的数比较。
如果现在的数更小。替换ArrayList中这个数。时间复杂度：O(KN)
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> result=new ArrayList<Integer>();
        int len=input.length;
        if(input==null||k<=0||k>input.length||input.length==0)
           return result;
           for(int i=0;i<k;i++){
               result.add(input[i]);
           }
        for(int i=k;i<len;i++){
            int j=getMax(result);
            int temp=result.get(j);
            if(input[i]<temp){
                result.set(j,input[i]);
            }
        }
        return result;
    }
    public int getMax(ArrayList<Integer> result){
        int max=result.get(0);
        int j=0;
        for(int i=0;i<result.size();i++){
            if(result.get(i)>max){
                max=result.get(i);
                j=i;
            }
        }
        return j;
    }
}

