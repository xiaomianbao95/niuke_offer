在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。
 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。
第一种方法：用哈希表
import java.util.HashMap;
public class Solution {
    // Parameters:
    //    numbers:     an array of integers
    //    length:      the length of array numbers
    //    duplication: (Output) the duplicated number in the array number,length of duplication array is 1,so using duplication[0] = ? in implementation;
    //                  Here duplication like pointor in C/C++, duplication[0] equal *duplication in C/C++
    //    这里要特别注意~返回任意重复的一个，赋值duplication[0]
    // Return value:       true if the input is valid, and there are some duplications in the array number
    //                     otherwise false
    public boolean duplicate(int numbers[],int length,int [] duplication) {
        if(numbers==null||length==0)
            return false;
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<length;i++){
            if(!map.containsKey(numbers[i])){
                map.put(numbers[i],1);
            }else{
                duplication[0]=numbers[i];
                return true;
            }
        }
        return false;
    
    }
}
第二种思路：因为是在长度n的数组里存0―n-1的数，所以如果没有重复的数，数组排序后肯定i=numbers[i]
如果有重复的数，i不等于numbers[i]，则判断m=numbers[i],m是不是等于numbers[m],如果等于就找到了。如果不等于
就把m和numbers[m]交换位置，把m放到自己的numbers[m],中，再继续判断现在i是不是等于于numbers[i]，不等于继续
交换放到合适位置，相等就找到。
    public boolean duplicate(int numbers[],int length,int [] duplication) {
        if(numbers==null||length==0)
            return false;
        for(int i=0;i<length;i++){
            while(i!=numbers[i]){
                if(numbers[i]==numbers[numbers[i]]){
                    duplication[0]=numbers[i];
                    return true;
                }else{
                    int temp=numbers[numbers[i]];
                    numbers[numbers[i]]=numbers[i];
                    numbers[i]=temp;
                }
            }
        }
        return false;
    }
}
