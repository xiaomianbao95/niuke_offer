输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下4 X 4矩阵：
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
分析：给一个矩阵顺时针打印，那就是最外圈打印然后内圈一直到最里面的那个结束，注意顺时针一圈时，走过了两列两行
所以我们要保证start*2<行列的长度，每一圈都和前一圈做同样的工作，所以，我们定义一个方法，一直调用就可以，注意
从左到右,从右到左，最后的边界，从上到下的边界，注意如果只有一行就不用执行这一步，所以限定endY>start,保证有下一行，同样
的从下到上，保证有下一列，endX>start.
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printMatrix(int [][] matrix) {
        ArrayList<Integer> list=new ArrayList<Integer>();
       if(matrix==null) return list;
        int start=0;
        while((start*2<matrix.length)&&(start*2<matrix[0].length)){
            printMatrixIncircle(matrix,start,list);
            start++;
        }
        return list;
    }
    public ArrayList<Integer> printMatrixIncircle(int [][] matrix,int start,ArrayList<Integer> list){
        int endY=matrix.length-1-start;
        int endX=matrix[0].length-1-start;
        //从左到右打印
        for(int i=start;i<=endX;i++){
            list.add(matrix[start][i]);
        }
        //从上到下打印
        for(int i=start+1;i<=endY;i++){
            list.add(matrix[i][endX]);
        }
        //右到左打印
        if(endY>start){
            for(int i=endX-1;i>=start;i--){
               list.add(matrix[endY][i]);
            }
        }
        
        //从下到上打印
        if(endX>start){
            for(int i=endY-1;i>start;i--){
                list.add(matrix[i][start]);
            }
        }
        
        return list;
    }
}