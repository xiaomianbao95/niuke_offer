将一个字符串转换成一个整数(实现Integer.valueOf(string)的功能，但是string不符合数字要求时返回0)，
要求不能使用字符串转换整数的库函数。 数值为0或者字符串不是一个合法的数值则返回0。
输入描述:
输入一个字符串,包括数字字母符号,可以为空
输出描述:
如果是合法的数值表达则返回该数字，否则返回0
示例：
输入
+2147483647
    1a33
输出
2147483647
    0
做这道题要注意几个问题，要考虑全面
1.返回0时，是数值为0返回的还是不合法时返回的，因此设置一个flag，当非法的数值时，返回true；
2.要考虑溢出问题；
3.考虑正负号问题；所以先判断字符串第一位的符号，不要忘记最后返回时再加上符号。
str.charAt(start)返回的是char型的，在进行运算时用的是ASCII码，‘0’的ASCII是48，‘9’的ASCII是57，
所以str.charAt(start)-'0'可以得到该位的数值。
字符'0'到'9'的ascii值的低4个二进制位刚好就是0到9所以str.charAt(start)-'0'等于str.charAt(start)&0xf.
位运算效率高一点。
public class Solution {
    boolean temp=false;//非法标志位
    public int StrToInt(String str) {
        if(str==null||str.length()==0){
              temp=true;
            return 0;
        }
        int flag=0;
        if(str.charAt(0)=='+')
            flag=1;
        if(str.charAt(0)=='-')
            flag=2;
        int start=flag>0?1:0;
        int len=str.length();
        int res=0;
        while(start<len){
            if(str.charAt(start)>'9'||str.charAt(start)<'0'){
                temp=true;
                return 0;
            }
            res=(res<<1)+(res<<3)+(str.charAt(start)-'0');
            start++;
            if((flag==1&&res>Integer.MAX_VALUE)||(flag==2&&res<Integer.MIN_VALUE)){//考虑溢出
                temp=true;
                return 0;
            }
        }
        return flag==2?-res:res;
    }
}

public class Solution {
    boolean temp=false;
    public int StrToInt(String str) {
        String s=str.trim();
        if(s==null||s.length()==0){
            temp=true;
            return 0;
        }
        int flag1=0;
        int flag2=1;
        if(s.charAt(0)=='+')
            flag1=1;
        if(s.charAt(0)=='-'){
            flag1=2;
            flag2=-1;
        }
        int start=flag1>0?1:0;
        int len=s.length();
        long res=0;
        while(start<len){
            if(s.charAt(start)<'0'||s.charAt(start)>'9'){
                temp=true;
                return 0;
            }else{
                if(res*flag2>Integer.MAX_VALUE||res*flag2<Integer.MIN_VALUE){
                    temp=true;
                    return 0;
                }else{
                    res=res*10+(s.charAt(start)-'0');
                    start++;
                }
            }
        }
        return (int)res*flag2;
    }
}