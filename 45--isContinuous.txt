LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)...
他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,
嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子.....LL不高兴了,他想了想,
决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”
(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,
然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认
为大小王是0。
第一种方法，先把数组排序，然后统计0的个数，再不是0的数的差值如果他们的可以用0填补则就是顺子，
这里有一个重点就是后一个减前一个我们再减1再统计这样最后的总差值就是需要的0个数，如果0的个数
大于等于差值总数，则可以构成顺子，否则不能
import java.util.Arrays;
public class Solution {
    public boolean isContinuous(int [] numbers) {
        if(numbers==null||numbers.length==0)
            return false;
        Arrays.sort(numbers);
        int count=0;
        int cha=0;
        for(int i=0;i<numbers.length-1;i++){
            if(numbers[i]==0){
                count++;
                continue;
            }
            if(numbers[i]!=numbers[i+1]){
                cha+=numbers[i+1]-numbers[i]-1;
            }else{
                return false;
            }
        }
        if(cha<=count)
            return true;
        return false;
    }
}
第二种方法 新建一个数组以原有数组的数作为新的数组下标统计重复数组个数，如果大于1，返回false；
如果不重复就和最大最小的比较，最后max-min。如果max-min<5,说明可以组成顺子。注意，初始时，我们定义max
=-1,min=14.因为牌面大小从0到13，这样可以保证只有一个数时，也能得出max min.
public class Solution {
    public boolean isContinuous(int [] numbers) {
        if(numbers==null||numbers.length==0)
            return false;
        int[] array= new int[14];
        int max=-1;
        int min=14;
        for(int i=0;i<numbers.length;i++){
            if(numbers[i]==0)
                continue;
            array[numbers[i]]++;
            
            if(array[numbers[i]]>1){
                return false;
            }else{
            if(numbers[i]>max){
                max=numbers[i];
            }
            if(numbers[i]<min){
                min=numbers[i];
            }
            }
        }
        if(max-min<5)
            return true;
        return false;

    }
}
第三种方法：其实与第二种方法思路一样只是在判断是否包括重复数时，用了位运算,bit-Map
if(((flag>>number)&1)==1) return false;
            flag=flag|(1<<number);
这两条语句可以判断是否包含重复字符1<<number;把1移动该数字位，就可以把该位（也就是该数字）
置1（bit-Map），flag|(1<<number)就可以把该数字所在的位在flag中置1，((flag>>number)&1)==1，再把flag右移，
如果包含应该右移回到1所以通过与1判断是否包含。
public class Solution {
    public boolean isContinuous(int [] numbers) {
        if(numbers==null||numbers.length==0)
            return false;
        int[] array= new int[14];
        int max=-1;
        int min=14;
        int flag=0;
        for(int i=0;i<numbers.length;i++){
            if(numbers[i]==0)
                continue;
            int number=numbers[i];
            if(((flag>>number)&1)==1) return false;
            flag=flag|(1<<number);
            if(numbers[i]>max){
                max=numbers[i];
            }
            if(numbers[i]<min){
                min=numbers[i];
            }
            if(max-min>=5) return false;
        }
            return true;
    }
}