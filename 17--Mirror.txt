题目描述
操作给定的二叉树，将其变换为源二叉树的镜像。
输入描述:
二叉树的镜像定义：源二叉树 
    	    8
    	   /  \
    	  6   10
    	 / \  / \
    	5  7 9 11
    	镜像二叉树
    	    8
    	   /  \
    	  10   6
    	 / \  / \
    	11 9 7  5

第一种：用栈存树的左右子节点，有子节点交换，然后再有子节点，继续存进去，然后循环这个过程，直到，栈为空
import java.util.*;
public class Solution {
    public void Mirror(TreeNode root) {
        if(root==null) return;
        Stack<TreeNode> stack=new Stack<TreeNode>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node=stack.pop();
            if(node.left!=null||node.right!=null){
                TreeNode temp=node.left;
                node.left=node.right;
                node.right=temp;
            }
            if(node.left!=null)
                stack.push(node.left);
            if(node.right!=null)
                stack.push(node.right);
            
        }
    }
}

第二种递归：
public class Solution {
    public void Mirror(TreeNode root) {
        if(root==null) return ;
        if(root.left!=null||root.right!=null) {
            TreeNode temp=root.left;
            root.left=root.right;
            root.right=temp;
        }
        if(root.left!=null)
            Mirror(root.left);
        if(root.right!=null)
            Mirror(root.right);
    }
}