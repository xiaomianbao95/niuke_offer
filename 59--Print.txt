请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从
右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。
分析题目，刚好是奇数层从左到右打印，偶数层从右到左打印，我们选择用栈存每一层的节点
因为奇数层是左到右打印的，栈是先进后出的，所以我们存奇数层节点时要从右到左存，也就是先存
右子节点再存左子节点，偶数层是从右到左打印，所以存的时候要从左到右存，也就是先存左子节点，
再存右子节点。所以我们需要两个栈，一个存奇数层，一个存偶数层。
import java.util.Stack;
public class Solution {
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer> > res=new ArrayList<ArrayList<Integer> >();
        if(pRoot==null)
            return res;
        Stack<TreeNode> s1=new Stack<TreeNode>();
        Stack<TreeNode> s2=new Stack<TreeNode>();
        int flag=1;
        s1.push(pRoot);
        while(!s1.isEmpty()||!s2.isEmpty()){
            if(flag%2!=0&&!s1.isEmpty()){
                ArrayList<Integer> temp=new ArrayList<Integer>();
                while(!s1.isEmpty()){
                    TreeNode node=s1.pop();
                    temp.add(node.val);
                    if(node.left!=null)
                        s2.push(node.left);
                    if(node.right!=null)
                        s2.push(node.right);
                }
                res.add(temp);
                flag++;
            }
            if(flag%2==0&&!s2.isEmpty()){
                ArrayList<Integer> temp=new ArrayList<Integer>();
                while(!s2.isEmpty()){
                    TreeNode node=s2.pop();
                    temp.add(node.val);
                    if(node.right!=null)
                        s1.push(node.right);
                    if(node.left!=null)
                        s1.push(node.left);
                }
                res.add(temp);
                flag++;
            }
        }
        return res;
    }
}
第二种方法：用LinkedList 存节点，LinkedList有双向链表的特点，我们可以奇数层从前往后输出，偶数层
从后往前输出，迭代器中，iterator()从前往后输出，descendingIterator()从后往前输出；通过在每一层节点
最后存入null，当取到null时，表示开始新的一层遍历了，就要换遍历的方向。存节点时，就按顺序左右正常
存就可以。
注意：continue的重要性，因为当遇到node==null时，它没有左右子树，所以不用进行存储，可是在list中它
的后面还有其他节点，我们要一个一个取每个节点，再存它的左右子树，所以必须continue。
import java.util.ArrayList;

/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
import java.util.LinkedList;
import java.util.Iterator;
public class Solution {
    public ArrayList<ArrayList<Integer> > Print(TreeNode pRoot) {
        ArrayList<ArrayList<Integer> > res=new ArrayList<ArrayList<Integer> >();
        if(pRoot==null)
            return res;
        LinkedList<TreeNode> list=new LinkedList<TreeNode>();
        ArrayList<Integer> array=new ArrayList<Integer>();
        list.addLast(null);//添加分层分隔符
        list.addLast(pRoot);
        boolean flag=true;
        while(list.size()!=1){
            TreeNode node=list.removeFirst();
            if(node==null){//到达分隔符
                Iterator<TreeNode> iter=null;
                if(flag){
                    iter=list.iterator();//从前往后遍历
                }else{
                    iter=list.descendingIterator();//从后往前遍历
                }
                flag=!flag;
                while(iter.hasNext()){
                    TreeNode temp=iter.next();
                    array.add(temp.val);
                }
                res.add(new ArrayList<Integer>(array));
                array.clear();
                list.addLast(null);
                continue;
            }
            if(node.left!=null)
                list.addLast(node.left);
            if(node.right!=null)
                list.addLast(node.right);
        }
        return res;
    }
}