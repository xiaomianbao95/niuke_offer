请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出
前两个字符"go"时，第一个只出现一次的字符是"g"。当从该字符流中读出前六个字符“google"时，
第一个只出现一次的字符是"l"。
输出描述:
如果当前字符流没有存在出现一次的字符，返回#字符。
第一种方法：因为HashMap是键值对的存储方式因此可以可以用HashMap进行存储然后可以统计每个字符
出现的次数，关键就是题目要求输出第一个只出现一次的字符，怎么保证字符插入顺序呢，这里可以用
一个字符串进行统计，然后从前往后遍历字符串每个字符找在HashMap中的值是不是1，输出第一个找到
的即可。
import java.util.HashMap;
public class Solution {
    HashMap<Character,Integer> map=new HashMap<Character,Integer>();
    StringBuffer sb=new StringBuffer();
    //Insert one char from stringstream
    public void Insert(char ch)
    {
        sb.append(ch);
        if(!map.containsKey(ch)){
            map.put(ch,1);
        }else{
            int temp=map.get(ch);
            map.put(ch,temp+1);
        }
    }
  //return the first appearence once char in current stringstream
    public char FirstAppearingOnce()
    {
        for(int i=0;i<sb.length();i++){
            if(map.get(sb.charAt(i))==1){
                return sb.charAt(i);
            }
         }
        return '#';
    }
}