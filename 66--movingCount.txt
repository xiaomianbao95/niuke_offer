地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，
下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，
机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。
请问该机器人能够达到多少个格子？
思路：
机器人从0,0开始每次可以往上下左右移动一格，我们最后要求的是机器人的运动范围，也就是所有能满足条件
到达的格子，所以从上下左右每条路径走的满足要求得格子都要算，即所有的求和，因为已经走过的就不能再走了
所以我们需要一个布尔标记矩阵来标记已经走过的为true，注意题目要求，不能进入行坐标和列坐标的数位之和
大于k的格子，所以在进入格子之前我们要算下行坐标和列坐标之和是否小于等于k.
public class Solution {
    public int movingCount(int threshold, int rows, int cols)
    {
        if(rows==0||cols==0||threshold<0)
            return 0;
        boolean[] visited=new boolean[rows*cols];
        int count=search(threshold,rows,cols,0,0,visited);
        return count;
    }
    public int search(int threshold,int rows,int cols,int i,int j,boolean[] visited){
        int count=0;
        if(i>=0&&j>=0&&i<rows&&j<cols&&visited[i*cols+j]==false&&(getsum(i)+getsum(j))<=threshold){
            visited[i*cols+j]=true;
            count=1+search(threshold,rows,cols,i-1,j,visited)+
                search(threshold,rows,cols,i+1,j,visited)+
                search(threshold,rows,cols,i,j-1,visited)+
                search(threshold,rows,cols,i,j+1,visited);
        }
            return count;
    }
    private int getsum(int number){
        int sum=0;
        while(number>0){
            sum+=number%10;
            number/=10;
        }
        return sum;
    }
}
第二种方法：动态规划法dp[i][j]=true；表示能到达的格子
public class Solution {
    public int movingCount(int threshold, int rows, int cols)
    {
        if(rows==0||cols==0||threshold<0)
            return 0;
        boolean[][] dp=new boolean[rows][cols];
        dp[0][0]=true;
        for(int i=1;i<rows;i++){//初始化第一列
            if(dp[i-1][0]&&canreach(threshold,i,0)){
                dp[i][0]=true;
            }else{
                dp[i][0]=false;
            }
        }
        for(int i=1;i<cols;i++){//初始化第一行
            if(dp[0][i-1]&&canreach(threshold,0,i)){
                dp[0][i]=true;
            }else{
                dp[0][i]=false;
            }
        }
        //因为走过的就不用再走了，只考虑下和右就可以了
        for(int i=1;i<rows;i++){
            for(int j=1;j<cols;j++){
                if((dp[i-1][j]&&canreach(threshold,i,j))||
                   (dp[i][j-1]&&canreach(threshold,i,j))){
                    dp[i][j]=true;
                }else{
                    dp[i][j]=false;
                }
            }
        }
        //统计为true的就是能达到的格子
        int count=0;
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                if(dp[i][j])
                    count++;
            }
        }
        return count;
    }
    public boolean canreach(int threshold, int x, int y){
        int sum=0;
        while(x>0){
            sum+=x%10;
            x/=10;
        }
        while(y>0){
            sum+=y%10;
            y/=10;
        }
        return sum<=threshold;
    }
}
第三种方法：dfs深度优先算法
import java.util.Stack;
public class Solution {
    public int movingCount(int threshold, int rows, int cols)
    {
        if(rows==0||cols==0||threshold<0)
            return 0;
        boolean[] visited=new boolean[rows*cols];
        int count=dfs(threshold,rows,cols,0,0,visited);
        return count;
    }
    private static int[] x={1,0};//用来走到当前格子的上下左右，只走下和右就可以，顺序为：下，右；
    private static int[] y={0,1};
    private int dfs(int threshold, int rows, int cols,int i,int j,boolean[] visited){
        Stack<Integer> s=new Stack<Integer>();
        int count=0;
        s.push(i*cols+j);
        visited[0]=true;
        while(!s.isEmpty()){
            int current=s.pop();
            count++;//栈中都是满足要求的可以到达的，出一个1,count+1;
            for(int k=0;k<2;k++){
                int xx=current/cols+x[k];
                int yy=current%cols+y[k];
                int cur=xx*cols+yy;
                if(xx>=0&&xx<rows&&yy>=0&&yy<cols&&
                   visited[cur]==false&&canreach(threshold,xx,yy)){
                    s.push(cur);//可以到达的入栈，并设为true
                    visited[cur]=true;
                }
            }
        }
        //当栈为空时，所有满足要求的已经统计完
         return count;
    }
    public boolean canreach(int threshold, int x, int y){
        int sum=0;
        while(x>0){
            sum+=x%10;
            x/=10;
        }
        while(y>0){
            sum+=y%10;
            y/=10;
        }
        return sum<=threshold;
    }
}
