求1+2+3+...+n，要求不能使用乘除法、
for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。
第一种方法：
因为有很多不能使用的，我们看到这个题，第一个就会想到循环算，但不能用判断语句，
我们转循环成递归算，递归必须要有结束语句，又不能用if，这里我们用短路运算符“&&”
public class Solution {
    public int Sum_Solution(int n) {
        
        int result=n;
        boolean flag=(n>0)&&(result+=Sum_Solution( n-1))>0;
        return result;
      
    }
}
当n==0时，(n>0)返回false,就不会再判断后面的了
当（n>0）为true时，再执行后面的。注意，“&&”两边必须同时保持boolean型，所以后面一项也加>0.
第二种方法：
用Math中的方法，等差数列求和，S=(n^2+n)/2 右移一位实现除2运算。
public class Solution {
    public int Sum_Solution(int n) {
        return (int)(Math.pow(n,2)+n)>>1;
    }
}
第三种方法：
用递归实现n*(n+1)
把a拆成2的幂的和，a=2^e0+2^e1+2^e3+.......
那么a*b=(2^e0+2^e1+2^e3+.......)*b
=b*2^e0+b*2^e1+b*2^e3+......
=(b<<e0)+(b<<e1)+(b<<e2)+...e0,e1,e2.....代表a用二进制表示时，1所在的位，则每当遇到a
中的一个1时，一个小部分计算完毕，要实现累加，1代表第几位，b就要左移几位，所以我们把a右移
时，b左移就可以同时实现a,b的移动位数一致，这样当a中的1移到第0位时，一小部分完成要进行一次
累加了，可以用（a&1==1）判断a是否有1移动到了第0位，还要进行循环操作当（a!=0）时，我们要一直
循环，所以有如下代码
public class Solution {
    public int Sum_Solution(int n) {
        int res=Mutil(n,n+1);
        return res>>=1;
    }
    private int Mutil(int a,int b){
        int res=0;
        boolean flag1=((a&1)==1)&&(res+=b)>0;
        a>>=1;
        b<<=1;
        boolean flag2=(a!=0)&&(res+=Mutil( a,b))>0;
        return res;
    }
}
