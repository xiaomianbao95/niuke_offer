每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,
自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定
一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任
意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0...m-1报数....这样下去....直到剩下
最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着
想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)
第一种方法：时间复杂度高，但是最基本的思想，
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        if(n<1||m<1)
            return -1;
        int [] array=new int[n];
        int result=-1,step=0,count=n;//step记录走过的数的个数，result记录喊数的小朋友
        while(count>0){
            result++;
            if(result>=n) result=0;//模拟环
            if(array[result]==-1) continue;//删除的就直接跳过
            step++;
            if(step==m){
                array[result]=-1;
                step=0;
                count--;
            }
        }
        return result;
    }
}
第二种方法：约瑟夫环问题：总结出一个规律：
递推公式

f[1]=0;

f[n,m]=(f[n-1,m]+m)%n;  (n>1);f(n,m)表示在n个数中删除第m个・数最后剩下的数。
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        if(n<1||m<1)
            return -1;
        if(n==1)
            return 0;
        return (LastRemaining_Solution(n-1,m)+m)%n;
    }
}
第三种方法:用环链表
import java.util.LinkedList;
public class Solution {
    public int LastRemaining_Solution(int n, int m) {
        if(n<1||m<1)
            return -1;
        if(n==1)
            return 0;
            LinkedList<Integer> list=new LinkedList<Integer>();
            for(int i=0;i<n;i++){
            list.add(i);
            }
        int rem=0;
            while(list.size()>1){
            rem=(rem+m-1)%list.size();//实现循环操作
            list.remove(rem);
            }
            return list.get(0);
    }
}

