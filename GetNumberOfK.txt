第一种方法，顺序遍历数组找到数字出现的次数，时间复杂度O(n),不是面试官满意的思路。
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
       if(array==null)
           return 0;
        int count=0;
        int len=array.length;
        for(int i=0;i<len;i++){
            if(array[i]==k){
                count++;
            }
        }
        return count;
    }
}
第二种方法，用二分法，但是我们要对平常的二分法进行一点改变，让时间复杂度低一点，首先我们要二分查找到
该数字第一次出现的位置，我们把中间值与该数字比较如果相等，再看前一位是否相等，如果不相等，则该位置是
数字第一次出现的位置，如果相等则在前半段查找第一次出现的位置，查找最后一次数字出现的位置方法类似。
public class Solution {
    public int GetNumberOfK(int [] array , int k) {
       if(array==null)
           return 0;
        int len=array.length;
        int result=0;
        if(array!=null&&len>0){
            int firstindex=GetFirstK(array,0,len-1,k);
            int lastindex=GetLastK(array,0,len-1,k);
            if(firstindex>-1&&lastindex>-1)
                result=lastindex-firstindex+1;
        }
        return result;
    }
    public int GetFirstK(int [] array,int start,int end,int k){
        if(start>end)
            return -1;
        int mid=(start+end)/2;
        if(array[mid]==k){
            if((mid>0&&array[mid-1]!=k)||mid==0)
                return mid;
            else
                end=mid-1;
        }else if(array[mid]>k){
            end=mid-1;
        }else{
            start=mid+1;
        }
        return GetFirstK(array,start,end,k);
    }
    public int GetLastK(int [] array,int start,int end,int k){
        if(start>end)
            return -1;
        int mid=(start+end)/2;
        int len=array.length;
        if(array[mid]==k){
            if((mid<len-1&&array[mid+1]!=k)||mid==len-1){
                return mid;
            }else{
                start=mid+1;
            }
        }else if(array[mid]<k){
            start=mid+1;
        }else{
            end=mid-1;
        }
        return GetLastK(array,start,end, k);
    }

}