用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。
思路：
栈先进后出，队列先入先出
那就可以一个栈放进去，再出来放进另一个栈就可以实现先进去的先出来了
注意：
1.当两个栈都为空时，没有可以放入第二个栈的也没有出来的返回0或者抛出异常
throw new RuntimeException("Queue is empty!");；
2.必须在第二栈为空时才可以再加入新的数据，不然之前的数据就不能实现先入先出了，
一直加入从第一个栈出来的，直到第一个栈全部出来。
3.第二个栈不为空时，就出第二个栈的数据就OK。

import java.util.Stack;
public class Solution {
    Stack<Integer> stack1 = new Stack<Integer>();
    Stack<Integer> stack2 = new Stack<Integer>();
    public void push(int node) {
        stack1.push(node);
    }
    public int pop() {
        if(stack1.isEmpty()&&stack2.isEmpty()){
            return 0;
        }
        if(stack2.isEmpty()){
            while(!stack1.isEmpty()){
                 stack2.push(stack1.pop());
            }
        }
        return stack2.pop();
    }
}